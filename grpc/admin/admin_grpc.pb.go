// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.2
// source: admin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AdminService_ClientRegister_FullMethodName   = "/admin.AdminService/ClientRegister"
	AdminService_ClientDisconnect_FullMethodName = "/admin.AdminService/ClientDisconnect"
	AdminService_ClientList_FullMethodName       = "/admin.AdminService/ClientList"
	AdminService_ConnectionList_FullMethodName   = "/admin.AdminService/ConnectionList"
	AdminService_SocksStart_FullMethodName       = "/admin.AdminService/SocksStart"
	AdminService_SocksStop_FullMethodName        = "/admin.AdminService/SocksStop"
	AdminService_TunnelAdd_FullMethodName        = "/admin.AdminService/TunnelAdd"
	AdminService_TunnelDelete_FullMethodName     = "/admin.AdminService/TunnelDelete"
	AdminService_TunnelList_FullMethodName       = "/admin.AdminService/TunnelList"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The AdminService is used for performing administrative actions
// with gServer, such as adding tunnels, configuring clients, and
// listing out the state of gServer.
type AdminServiceClient interface {
	// Generates a configred gClient executable
	ClientRegister(ctx context.Context, in *ClientRegisterRequest, opts ...grpc.CallOption) (*ClientRegisterResponse, error)
	// Disconnects a client from the server
	ClientDisconnect(ctx context.Context, in *ClientDisconnectRequest, opts ...grpc.CallOption) (*ClientDisconnectResponse, error)
	// Lists all connected gClients
	ClientList(ctx context.Context, in *ClientListRequest, opts ...grpc.CallOption) (AdminService_ClientListClient, error)
	// List all connections for a tunnel
	ConnectionList(ctx context.Context, in *ConnectionListRequest, opts ...grpc.CallOption) (AdminService_ConnectionListClient, error)
	// Starts a SocksV5 server on a gClient
	SocksStart(ctx context.Context, in *SocksStartRequest, opts ...grpc.CallOption) (*SocksStartResponse, error)
	// Stops a SocksV5 server on a gClient
	SocksStop(ctx context.Context, in *SocksStopRequest, opts ...grpc.CallOption) (*SocksStopResponse, error)
	// Add a tunnel
	TunnelAdd(ctx context.Context, in *TunnelAddRequest, opts ...grpc.CallOption) (*TunnelAddResponse, error)
	// Delete a tunnel
	TunnelDelete(ctx context.Context, in *TunnelDeleteRequest, opts ...grpc.CallOption) (*TunnelDeleteResponse, error)
	// List all tunnels for an endppoint
	TunnelList(ctx context.Context, in *TunnelListRequest, opts ...grpc.CallOption) (AdminService_TunnelListClient, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) ClientRegister(ctx context.Context, in *ClientRegisterRequest, opts ...grpc.CallOption) (*ClientRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientRegisterResponse)
	err := c.cc.Invoke(ctx, AdminService_ClientRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ClientDisconnect(ctx context.Context, in *ClientDisconnectRequest, opts ...grpc.CallOption) (*ClientDisconnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientDisconnectResponse)
	err := c.cc.Invoke(ctx, AdminService_ClientDisconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ClientList(ctx context.Context, in *ClientListRequest, opts ...grpc.CallOption) (AdminService_ClientListClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], AdminService_ClientList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceClientListClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_ClientListClient interface {
	Recv() (*Client, error)
	grpc.ClientStream
}

type adminServiceClientListClient struct {
	grpc.ClientStream
}

func (x *adminServiceClientListClient) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) ConnectionList(ctx context.Context, in *ConnectionListRequest, opts ...grpc.CallOption) (AdminService_ConnectionListClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[1], AdminService_ConnectionList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceConnectionListClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_ConnectionListClient interface {
	Recv() (*Connection, error)
	grpc.ClientStream
}

type adminServiceConnectionListClient struct {
	grpc.ClientStream
}

func (x *adminServiceConnectionListClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) SocksStart(ctx context.Context, in *SocksStartRequest, opts ...grpc.CallOption) (*SocksStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SocksStartResponse)
	err := c.cc.Invoke(ctx, AdminService_SocksStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SocksStop(ctx context.Context, in *SocksStopRequest, opts ...grpc.CallOption) (*SocksStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SocksStopResponse)
	err := c.cc.Invoke(ctx, AdminService_SocksStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TunnelAdd(ctx context.Context, in *TunnelAddRequest, opts ...grpc.CallOption) (*TunnelAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TunnelAddResponse)
	err := c.cc.Invoke(ctx, AdminService_TunnelAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TunnelDelete(ctx context.Context, in *TunnelDeleteRequest, opts ...grpc.CallOption) (*TunnelDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TunnelDeleteResponse)
	err := c.cc.Invoke(ctx, AdminService_TunnelDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TunnelList(ctx context.Context, in *TunnelListRequest, opts ...grpc.CallOption) (AdminService_TunnelListClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[2], AdminService_TunnelList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceTunnelListClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_TunnelListClient interface {
	Recv() (*Tunnel, error)
	grpc.ClientStream
}

type adminServiceTunnelListClient struct {
	grpc.ClientStream
}

func (x *adminServiceTunnelListClient) Recv() (*Tunnel, error) {
	m := new(Tunnel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
//
// The AdminService is used for performing administrative actions
// with gServer, such as adding tunnels, configuring clients, and
// listing out the state of gServer.
type AdminServiceServer interface {
	// Generates a configred gClient executable
	ClientRegister(context.Context, *ClientRegisterRequest) (*ClientRegisterResponse, error)
	// Disconnects a client from the server
	ClientDisconnect(context.Context, *ClientDisconnectRequest) (*ClientDisconnectResponse, error)
	// Lists all connected gClients
	ClientList(*ClientListRequest, AdminService_ClientListServer) error
	// List all connections for a tunnel
	ConnectionList(*ConnectionListRequest, AdminService_ConnectionListServer) error
	// Starts a SocksV5 server on a gClient
	SocksStart(context.Context, *SocksStartRequest) (*SocksStartResponse, error)
	// Stops a SocksV5 server on a gClient
	SocksStop(context.Context, *SocksStopRequest) (*SocksStopResponse, error)
	// Add a tunnel
	TunnelAdd(context.Context, *TunnelAddRequest) (*TunnelAddResponse, error)
	// Delete a tunnel
	TunnelDelete(context.Context, *TunnelDeleteRequest) (*TunnelDeleteResponse, error)
	// List all tunnels for an endppoint
	TunnelList(*TunnelListRequest, AdminService_TunnelListServer) error
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) ClientRegister(context.Context, *ClientRegisterRequest) (*ClientRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRegister not implemented")
}
func (UnimplementedAdminServiceServer) ClientDisconnect(context.Context, *ClientDisconnectRequest) (*ClientDisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDisconnect not implemented")
}
func (UnimplementedAdminServiceServer) ClientList(*ClientListRequest, AdminService_ClientListServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientList not implemented")
}
func (UnimplementedAdminServiceServer) ConnectionList(*ConnectionListRequest, AdminService_ConnectionListServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectionList not implemented")
}
func (UnimplementedAdminServiceServer) SocksStart(context.Context, *SocksStartRequest) (*SocksStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocksStart not implemented")
}
func (UnimplementedAdminServiceServer) SocksStop(context.Context, *SocksStopRequest) (*SocksStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocksStop not implemented")
}
func (UnimplementedAdminServiceServer) TunnelAdd(context.Context, *TunnelAddRequest) (*TunnelAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TunnelAdd not implemented")
}
func (UnimplementedAdminServiceServer) TunnelDelete(context.Context, *TunnelDeleteRequest) (*TunnelDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TunnelDelete not implemented")
}
func (UnimplementedAdminServiceServer) TunnelList(*TunnelListRequest, AdminService_TunnelListServer) error {
	return status.Errorf(codes.Unimplemented, "method TunnelList not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_ClientRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ClientRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ClientRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ClientRegister(ctx, req.(*ClientRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ClientDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ClientDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ClientDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ClientDisconnect(ctx, req.(*ClientDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ClientList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).ClientList(m, &adminServiceClientListServer{ServerStream: stream})
}

type AdminService_ClientListServer interface {
	Send(*Client) error
	grpc.ServerStream
}

type adminServiceClientListServer struct {
	grpc.ServerStream
}

func (x *adminServiceClientListServer) Send(m *Client) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_ConnectionList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).ConnectionList(m, &adminServiceConnectionListServer{ServerStream: stream})
}

type AdminService_ConnectionListServer interface {
	Send(*Connection) error
	grpc.ServerStream
}

type adminServiceConnectionListServer struct {
	grpc.ServerStream
}

func (x *adminServiceConnectionListServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_SocksStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocksStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SocksStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SocksStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SocksStart(ctx, req.(*SocksStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SocksStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocksStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SocksStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SocksStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SocksStop(ctx, req.(*SocksStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TunnelAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TunnelAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TunnelAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TunnelAdd(ctx, req.(*TunnelAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TunnelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TunnelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TunnelDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TunnelDelete(ctx, req.(*TunnelDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TunnelList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TunnelListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).TunnelList(m, &adminServiceTunnelListServer{ServerStream: stream})
}

type AdminService_TunnelListServer interface {
	Send(*Tunnel) error
	grpc.ServerStream
}

type adminServiceTunnelListServer struct {
	grpc.ServerStream
}

func (x *adminServiceTunnelListServer) Send(m *Tunnel) error {
	return x.ServerStream.SendMsg(m)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRegister",
			Handler:    _AdminService_ClientRegister_Handler,
		},
		{
			MethodName: "ClientDisconnect",
			Handler:    _AdminService_ClientDisconnect_Handler,
		},
		{
			MethodName: "SocksStart",
			Handler:    _AdminService_SocksStart_Handler,
		},
		{
			MethodName: "SocksStop",
			Handler:    _AdminService_SocksStop_Handler,
		},
		{
			MethodName: "TunnelAdd",
			Handler:    _AdminService_TunnelAdd_Handler,
		},
		{
			MethodName: "TunnelDelete",
			Handler:    _AdminService_TunnelDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientList",
			Handler:       _AdminService_ClientList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectionList",
			Handler:       _AdminService_ConnectionList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TunnelList",
			Handler:       _AdminService_TunnelList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}
