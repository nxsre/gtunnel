// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.2
// source: client.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ClientService_CreateEndpointControlStream_FullMethodName = "/client.ClientService/CreateEndpointControlStream"
	ClientService_CreateTunnelControlStream_FullMethodName   = "/client.ClientService/CreateTunnelControlStream"
	ClientService_GetConfigurationMessage_FullMethodName     = "/client.ClientService/GetConfigurationMessage"
	ClientService_CreateConnectionStream_FullMethodName      = "/client.ClientService/CreateConnectionStream"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The client service is the grpc interface for a gClient to manage tunnels
// and tcp connections with gServer.
type ClientServiceClient interface {
	// Gets a stream of control messages from the server
	CreateEndpointControlStream(ctx context.Context, in *EndpointControlMessage, opts ...grpc.CallOption) (ClientService_CreateEndpointControlStreamClient, error)
	// Gets a stream of control messages for creating and deleting tcp connections
	CreateTunnelControlStream(ctx context.Context, opts ...grpc.CallOption) (ClientService_CreateTunnelControlStreamClient, error)
	// Gets a configuration message based on the bearer token
	GetConfigurationMessage(ctx context.Context, in *GetConfigurationMessageRequest, opts ...grpc.CallOption) (*GetConfigurationMessageResponse, error)
	// Bidirectional stream representing a TCP connection
	CreateConnectionStream(ctx context.Context, opts ...grpc.CallOption) (ClientService_CreateConnectionStreamClient, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) CreateEndpointControlStream(ctx context.Context, in *EndpointControlMessage, opts ...grpc.CallOption) (ClientService_CreateEndpointControlStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[0], ClientService_CreateEndpointControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceCreateEndpointControlStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientService_CreateEndpointControlStreamClient interface {
	Recv() (*EndpointControlMessage, error)
	grpc.ClientStream
}

type clientServiceCreateEndpointControlStreamClient struct {
	grpc.ClientStream
}

func (x *clientServiceCreateEndpointControlStreamClient) Recv() (*EndpointControlMessage, error) {
	m := new(EndpointControlMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientServiceClient) CreateTunnelControlStream(ctx context.Context, opts ...grpc.CallOption) (ClientService_CreateTunnelControlStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[1], ClientService_CreateTunnelControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceCreateTunnelControlStreamClient{ClientStream: stream}
	return x, nil
}

type ClientService_CreateTunnelControlStreamClient interface {
	Send(*TunnelControlMessage) error
	Recv() (*TunnelControlMessage, error)
	grpc.ClientStream
}

type clientServiceCreateTunnelControlStreamClient struct {
	grpc.ClientStream
}

func (x *clientServiceCreateTunnelControlStreamClient) Send(m *TunnelControlMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceCreateTunnelControlStreamClient) Recv() (*TunnelControlMessage, error) {
	m := new(TunnelControlMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientServiceClient) GetConfigurationMessage(ctx context.Context, in *GetConfigurationMessageRequest, opts ...grpc.CallOption) (*GetConfigurationMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigurationMessageResponse)
	err := c.cc.Invoke(ctx, ClientService_GetConfigurationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) CreateConnectionStream(ctx context.Context, opts ...grpc.CallOption) (ClientService_CreateConnectionStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[2], ClientService_CreateConnectionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceCreateConnectionStreamClient{ClientStream: stream}
	return x, nil
}

type ClientService_CreateConnectionStreamClient interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ClientStream
}

type clientServiceCreateConnectionStreamClient struct {
	grpc.ClientStream
}

func (x *clientServiceCreateConnectionStreamClient) Send(m *BytesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceCreateConnectionStreamClient) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
//
// The client service is the grpc interface for a gClient to manage tunnels
// and tcp connections with gServer.
type ClientServiceServer interface {
	// Gets a stream of control messages from the server
	CreateEndpointControlStream(*EndpointControlMessage, ClientService_CreateEndpointControlStreamServer) error
	// Gets a stream of control messages for creating and deleting tcp connections
	CreateTunnelControlStream(ClientService_CreateTunnelControlStreamServer) error
	// Gets a configuration message based on the bearer token
	GetConfigurationMessage(context.Context, *GetConfigurationMessageRequest) (*GetConfigurationMessageResponse, error)
	// Bidirectional stream representing a TCP connection
	CreateConnectionStream(ClientService_CreateConnectionStreamServer) error
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) CreateEndpointControlStream(*EndpointControlMessage, ClientService_CreateEndpointControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateEndpointControlStream not implemented")
}
func (UnimplementedClientServiceServer) CreateTunnelControlStream(ClientService_CreateTunnelControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTunnelControlStream not implemented")
}
func (UnimplementedClientServiceServer) GetConfigurationMessage(context.Context, *GetConfigurationMessageRequest) (*GetConfigurationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationMessage not implemented")
}
func (UnimplementedClientServiceServer) CreateConnectionStream(ClientService_CreateConnectionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateConnectionStream not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_CreateEndpointControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EndpointControlMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).CreateEndpointControlStream(m, &clientServiceCreateEndpointControlStreamServer{ServerStream: stream})
}

type ClientService_CreateEndpointControlStreamServer interface {
	Send(*EndpointControlMessage) error
	grpc.ServerStream
}

type clientServiceCreateEndpointControlStreamServer struct {
	grpc.ServerStream
}

func (x *clientServiceCreateEndpointControlStreamServer) Send(m *EndpointControlMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientService_CreateTunnelControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).CreateTunnelControlStream(&clientServiceCreateTunnelControlStreamServer{ServerStream: stream})
}

type ClientService_CreateTunnelControlStreamServer interface {
	Send(*TunnelControlMessage) error
	Recv() (*TunnelControlMessage, error)
	grpc.ServerStream
}

type clientServiceCreateTunnelControlStreamServer struct {
	grpc.ServerStream
}

func (x *clientServiceCreateTunnelControlStreamServer) Send(m *TunnelControlMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceCreateTunnelControlStreamServer) Recv() (*TunnelControlMessage, error) {
	m := new(TunnelControlMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClientService_GetConfigurationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetConfigurationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetConfigurationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetConfigurationMessage(ctx, req.(*GetConfigurationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_CreateConnectionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).CreateConnectionStream(&clientServiceCreateConnectionStreamServer{ServerStream: stream})
}

type ClientService_CreateConnectionStreamServer interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ServerStream
}

type clientServiceCreateConnectionStreamServer struct {
	grpc.ServerStream
}

func (x *clientServiceCreateConnectionStreamServer) Send(m *BytesMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceCreateConnectionStreamServer) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigurationMessage",
			Handler:    _ClientService_GetConfigurationMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateEndpointControlStream",
			Handler:       _ClientService_CreateEndpointControlStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateTunnelControlStream",
			Handler:       _ClientService_CreateTunnelControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateConnectionStream",
			Handler:       _ClientService_CreateConnectionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "client.proto",
}
